package com.example.rest.controller;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.net.URI;
import java.util.List;

import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.example.rest.dao.UserRepository;
import com.example.rest.exception.UserNotFoundException;
import com.example.rest.user.User;

import jakarta.transaction.Transactional;
import jakarta.validation.Valid;

@RestController
public class UserJpaController {

	//private UserDaoService daoService;

	private UserRepository repository;

	public UserJpaController(UserRepository repository) {
		this.repository = repository;
	}

	@GetMapping("/jpa/users")
	public List<User> getAllUsers() {
		return repository.findAll();
	}

	@Transactional
	@GetMapping("/jpa/users/{id}")
	public EntityModel<User> getById(@PathVariable int id) {
		User user = repository.findById(id).orElse(null);
		if (user == null) {
			throw new UserNotFoundException("id : " + id);
		}

		EntityModel<User> entityModel = EntityModel.of(user);

		WebMvcLinkBuilder link = linkTo(methodOn(this.getClass()).getAllUsers());

		entityModel.add(link.withRel("all-users"));

		return entityModel;
	}

	@DeleteMapping("/jpa/users/{id}")
	public String deleteUser(@PathVariable int id) {
		repository.deleteById(id);
		return "Deletion of userId : " + id + " is completed successfully...!!!";
	}

	@PostMapping("/jpa/users")
	public ResponseEntity<Object> saveUser(@Valid @RequestBody User user) {
		User savedUser = repository.save(user);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(savedUser.getId())
				.toUri();

		EntityModel<User> entityModel = EntityModel.of(savedUser);
		entityModel.add(linkTo(methodOn(this.getClass()).getById(savedUser.getId())).withRel("created-user"));

		return ResponseEntity.created(location).body(entityModel);
	}

}
